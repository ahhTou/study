<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        1.mybatis可以使用properties来引入外部properties配置文件的内容;
        resource: 引入类路径下的资源
        url:引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="JdbcConfig.properties"/>

    <!--
        2.setting包含很多重要的设置项
        setting:用来设置每一个设置项
            name：设置项名
            value：设置项取值
    -->
    
    <settings>
        <!-- 数据库为a_column时 自动 映射到javaBean中的aColumn  -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="jdbcTypeForNull" value="NULL"/>
    </settings>

    <!-- 3.typeAliases别名处理器 可以为我们的java类型起别名
            别名不区分大小写
    -->
    <typeAliases>
        <!-- typeAlias 为某个java类型起别名
                type:指定要起别名的类型全类名,默认别名是小写employee
                alias:指定新的别名
        -->
<!--        <typeAlias type="U1_helloWorld.bean.Employee" alias="emp"/>-->

       <!-- package :为某个包下的所有类批量起别名
            name:指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名(类名小写，
        -->
        <package name="U1_helloWorld.bean"/>
        <package name="U2_Mapper.bean"/>
    </typeAliases>

    <!--
        4.environments环境们，mybatis可以配置多种环境
                            通过default指定使用环境。切换环境
            -> environment：配置一个具体的环境信息
                两个标签：
                    id代表当前环境的唯一标识
                    
                transactionManager: 事务管理器(开发时主要用Spring)
                    -> type:事务管理器类型(JDBC | MANAGED)
                            自定义事务管理器，实现TransactionFactory.
                            type指定全类型
                dataSource:数据源 ;
                    -> type: 数据源类型（UNPOOLED | POOLED | JNDI ）
                        自定义数据源： 实现dataSourceFactory接口。type是全类名


        -->
    <environments default="test">
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 5.dataBaseIdProvider : 支持多数据厂商的：
          type="DB_VENDOR" ：
          作用就是得到数据库厂商标识(驱动getDataProductName())
          ：mybatis就能根据数据库厂商标识
          MySQL, Oracle, SQL Server

          然后到sql映射文件中select标签去写
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同和数据库厂商起别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
    </databaseIdProvider>



    <!-- 将我们写好的sql映射文件一定要注册到全局配置文件中（mybatis-config.xml）-->
    <!-- 6.mappers：将sql映射注册到全局配置中 -->
    <mappers>
        <!-- mapper：注册一个sql映射

                注册配置文件
                -> resource : 引用类路径下的sql映射文件
                    -> U1/EmployeeMapper.xml
                -> url: 引用网络路径或者磁盘路径下的sql映射文件
                    file:///var//mappers/AuthorMapper.xml"

                注册接口
                -> class: 引用（注册）接口
                        1、有sq1映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下;
                        2、没有sq1映射文件，所有的sq1都是利用注解写在接口上
                        推荐:
                        比较重要的，复杂的Dao接口我们来写sq1映射文件
                        不重要，简单的Dao接口为了开发快速可以使用注解;



         -->
        <!-- U1 -->
<!--        <mapper resource="U1/EmployeeMapper.xml"/>-->
<!--        <mapper class="U1_helloWorld.dao.EmployeeMapper"/>-->
<!--        <mapper class="U1_helloWorld.dao.EmployeeMapperAnnotation"/>-->

        <!-- 批量注册 -->
<!--        <package name="U1_helloWorld.dao"/>-->

        <!-- U2 -->
        <mapper resource="U2/EmployeeMapper.xml"/>
        <mapper resource="U2/EmployeeMapperPlus.xml"/>
    </mappers>
</configuration>