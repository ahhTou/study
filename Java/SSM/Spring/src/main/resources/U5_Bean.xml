<?xml version="1.0" encoding="UTF-8"?>
<!--创建约束-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    spring中的依赖注入
            依赖注入
                Dependency Injection
            IOC的作用
                降低程序间的耦合
            依赖关系的管理：
                以后都交给了spring
            在当前类需要用到其他其他类的对象
            由spring为我们提供
            我们只需要在配置文件中生命
            依赖关系的维护
                就称为依赖注入
                依赖注入：
                    一.能注入的数据，有三类
                    1.基本类型和string
                    2.其他bean类型
                    3.复杂类型/ 集合类型
                    二.能注入的方式，有三种
                    1.使用构造函数提供
                    2.使用set方法提供
                    3.使用注解提供（之后的内容）
    -->

    <!--    构造函数注入
        使用的标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性:
            type:
            用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index:
            用于指定要注入的数据给构造函数中指定的索引位置的参数赋值，索引从0开始
            name:
            用于指定给构造函数中指定名称的参数赋值
            =====以上三个用于指定给构造函数中指定的参数赋值=====
            value: 用于提供基本类型和String类型的数据
            ref :用于指定其他的bean类型数据。 它指的就是在spring的Ioc核心容 器中出现过的bean对象|

    -->
    <bean
            id="accountService"
            class="U5_DI.impl.AccountServiceImpl"
    >
        <constructor-arg name="name" value="ahhTou"/>
        <constructor-arg name="age" value="20"/>
        <constructor-arg name="birthday" ref="now"/>
    </bean>

    <!--    set方法注入 更常用
            设计的标签：property
            出现的位置：bean标签的内部
            标签出现的位置：bean标签的内部
            name:
            用于指定注入时调用的set方法名称
            =====以上三个用于指定给构造函数中指定的参数赋值=====
            value: 用于提供基本类型和String类型的数据
            ref :用于指定其他的bean类型数据。 它指的就是在spring的Ioc核心容 器中出现过的bean对象|
            优势：
                创建对象时没有明确的限制，可以直接使用默认构造函数
            弊端：
                如果有某个成员必须有值，则set方法无法保证一定注入。

    -->
    <bean
            id="accountService2"
            class="U5_DI.impl.AccountServiceImpl2"
    >
        <property name="name" value="ahhTou"/>
        <property name="age" value="20"/>
        <property name="birthday" ref="now"/>
    </bean>
    <!--    配置一个日期对象-->
    <bean id="now" class="java.util.Date"/>


    <!-- 复杂类型/ 集合类型 的注入
         用于给list结构集合注入的标签，
         list array set
         用于map结构的集合注入的标签
         map props
         结构相同，标签可以互换
    -->
    <bean
            id="accountService3"
            class="U5_DI.impl.AccountServiceImpl3"
    >
        <property name="myStr">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="mySet">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"/>
                <entry key="testB">
                    <value>BBB</value>
                </entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="testD">DDD</prop>
                <prop key="testC">CCC</prop>
            </props>
        </property>

    </bean>

</beans>